#!/usr/bin/env bash

set -euo pipefail

readonly default_image="hashicorp/envconsul"
readonly default_tag="latest"
readonly image="${BUILDKITE_PLUGIN_VAULT_ENV_IMAGE:-${default_image}}:${BUILDKITE_PLUGIN_VAULT_ENV_TAG:-${default_tag}}"

# Fail if there is no Vault token; gotta log in first
########################################################################
if [ -z "${VAULT_TOKEN:-}" ]; then
    echo "--- :skull_and_crossbones: Could not find 'VAULT_TOKEN' in the environment!"
    exit 1
fi

# Resolve Vault address
########################################################################
if [ -n "${BUILDKITE_PLUGIN_VAULT_ENV_ADDRESS:-}" ]; then
    VAULT_ADDR="${BUILDKITE_PLUGIN_VAULT_ENV_ADDRESS}"
    export VAULT_ADDR
fi
if [ -z "${VAULT_ADDR:-}" ]; then
    echo "--- :skull_and_crossbones: Could not find 'VAULT_ADDR' in the environment, and 'BUILDKITE_PLUGIN_VAULT_ENV_ADDRESS' was not specified!"
    exit 1
fi

# Resolve Vault namespace
########################################################################
if [ -n "${BUILDKITE_PLUGIN_VAULT_ENV_NAMESPACE:-}" ]; then
    VAULT_NAMESPACE="${BUILDKITE_PLUGIN_VAULT_ENV_NAMESPACE}"
    export VAULT_NAMESPACE
fi
if [ -z "${VAULT_NAMESPACE:-}" ]; then
    echo "--- :skull_and_crossbones: Could not find 'VAULT_NAMESPACE' in the environment, and 'BUILDKITE_PLUGIN_VAULT_ENV_NAMESPACE' was not specified!"
    exit 1
fi

# Resolve secret prefix
########################################################################
secret_prefix="${BUILDKITE_PLUGIN_VAULT_ENV_SECRET_PREFIX:-}"

# If `secret_prefix` is not empty, and does not already end with a `/`, add a `/`
if [[ -n "${secret_prefix}" && ! "${secret_prefix}" =~ /$ ]]; then
    secret_prefix="${secret_prefix}/"
fi
readonly secret_prefix

########################################################################

readonly container_name="vault-env-plugin-${BUILDKITE_JOB_ID}"

# STOLEN FROM https://github.com/buildkite-plugins/docker-buildkite-plugin/blob/9f90d8ef742d9fa1eb3556720e16f2b842ff1cb2/hooks/command#L25-L47
#
# Reads a list from plugin config into a global result array
# Returns success if values were read
plugin_read_list_into_result() {
    result=()

    for prefix in "$@"; do
        local i=0
        local parameter="${prefix}_${i}"

        if [[ -n "${!prefix:-}" ]]; then
            echo ":rotating_light: Plugin received a string for $prefix, expected an array" >&2
            exit 1
        fi

        while [[ -n "${!parameter:-}" ]]; do
            result+=("${!parameter}")
            i=$((i + 1))
            parameter="${prefix}_${i}"
        done
    done

    [[ ${#result[@]} -gt 0 ]] || return 1
}

envconsul_env() {
    # This populates a `result` array for later use
    plugin_read_list_into_result BUILDKITE_PLUGIN_VAULT_ENV_SECRETS

    secrets=()
    for secret in "${result[@]}"; do
        # secret_prefix is guaranteed to end with a / if it is non-empty
        secrets+=("-secret=${secret_prefix}${secret}")
    done

    # Explicitly *not* using `--rm` so we can output the container
    # logs in case of a failure.
    docker run \
        --env VAULT_TOKEN \
        --name="${container_name}" \
        -- \
        "${image}" \
        "${secrets[@]}" \
        -once \
        -upcase \
        -pristine \
        -no-prefix=true \
        -vault-addr="${VAULT_ADDR}" \
        -vault-namespace="${VAULT_NAMESPACE}" \
        -vault-renew-token=false \
        -vault-retry-attempts=1 \
        env
}

cleanup() {
    docker container rm --force "${container_name}" > /dev/null 2>&1
}

trap cleanup EXIT INT QUIT

echo "--- :vault: Pulling secrets from Vault"
echo "Using Docker image: ${image}"
echo "VAULT_ADDR=${VAULT_ADDR}"
echo "VAULT_NAMESPACE=${VAULT_NAMESPACE}"

if vault_env=$(envconsul_env); then
    set -o allexport
    eval "${vault_env}"
    set +o allexport
else
    retval=$?
    echo "--- :skull_and_crossbones: Failed to retrieve secrets from Vault"
    docker container logs "${container_name}"
    exit ${retval}
fi
